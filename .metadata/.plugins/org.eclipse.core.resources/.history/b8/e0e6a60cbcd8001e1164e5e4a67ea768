package com.reservation.controller;

import java.util.List;

import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestParam;


import com.reservation.dto.CustomerDTO;
import com.reservation.entity.Customer;
import com.reservation.exception.ReservationSystemException;
import com.reservation.service.CustomerService;

@RestController
@RequestMapping(value="/reservationSystem")
@Validated
public class ReservationController {
	
	@Autowired
	private CustomerService customerService;
	
	@Autowired
	private Environment environment;
	
	@GetMapping(value="/getCustomer/{id}")
	public ResponseEntity<CustomerDTO> getCustomerById(@PathVariable Integer id) throws ReservationSystemException{
		CustomerDTO customerDTO=customerService.getCustomerById(id);
		return new ResponseEntity<CustomerDTO>(customerDTO,HttpStatus.OK);
	}
	
	@GetMapping(value="/getAllCustomer")
	public ResponseEntity<List<CustomerDTO>> getAllCustomers() throws ReservationSystemException{
		List<CustomerDTO> customerDTOs=customerService.getAllCustomers();
		return new ResponseEntity<List<CustomerDTO>>(customerDTOs,HttpStatus.OK);
	}
	
	@PostMapping(value="/addCustomer")
	public ResponseEntity<String> addRole(@Valid @RequestBody CustomerDTO customerDTO) throws ReservationSystemException{
		Integer id=customerService.addCustomer(customerDTO);
		String successMessage=environment.getProperty("CUSTOMER_ADDED_SUCCESS");
		return new ResponseEntity<String>((successMessage+""+id),HttpStatus.CREATED);
	}
	
	 @GetMapping("/customer/filter")
	    public List<CustomerDTO> filterPersonsByAgeAndRole(
	            @RequestParam int minAge,
	            @RequestParam int maxAge,
	            @RequestParam String role) {
	        return customerService.findByAgeAndRole(minAge, maxAge, role);
	    }
	 @PutMapping(value="/editCustomer/{id}")
	 public ResponseEntity<String> updateCustomer(@Valid @RequestBody CustomerDTO customerDTO,@PathVariable Integer id) throws ReservationSystemException{
		 customerDTO.setId(id);
		 customerService.updateCustomer(customerDTO);
		 String success=environment.getProperty("CUSTOMER_UPDATED_SUCCESS");
		 return new ResponseEntity<String>(success,HttpStatus.OK);
	 }
	 @DeleteMapping(value="/deleteCustomer/{id}")
	 public ResponseEntity<String> deleteCustomer(@PathVariable Integer id) throws ReservationSystemException{
		 customerService.deleteCustomer(id);
		 String success=environment.getProperty("CUSTOMER_DELETE_SUCCESS");
		 return new ResponseEntity<String>(success,HttpStatus.OK);
	 }
	 @GetMapping("/login")
	    public String showLoginForm() {
			return null;
	        
	    }

}
